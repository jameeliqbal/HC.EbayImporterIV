/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace eBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type is used to state possible action(s) that a seller can take to release a payment hold placed against an order.
    /// </summary>
    [DataContract]
        public partial class SellerActionsToRelease :  IEquatable<SellerActionsToRelease>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SellerActionsToRelease" /> class.
        /// </summary>
        /// <param name="sellerActionToRelease">A possible action that the seller can take to expedite the release of a payment hold. A &lt;strong&gt;sellerActionToRelease&lt;/strong&gt; field is returned for each possible action that a seller may take. Possible actions may include providing shipping/tracking information, issuing a refund, providing refund information, contacting customer support, etc..</param>
        public SellerActionsToRelease(string sellerActionToRelease = default(string))
        {
            this.SellerActionToRelease = sellerActionToRelease;
        }
        
        /// <summary>
        /// A possible action that the seller can take to expedite the release of a payment hold. A &lt;strong&gt;sellerActionToRelease&lt;/strong&gt; field is returned for each possible action that a seller may take. Possible actions may include providing shipping/tracking information, issuing a refund, providing refund information, contacting customer support, etc.
        /// </summary>
        /// <value>A possible action that the seller can take to expedite the release of a payment hold. A &lt;strong&gt;sellerActionToRelease&lt;/strong&gt; field is returned for each possible action that a seller may take. Possible actions may include providing shipping/tracking information, issuing a refund, providing refund information, contacting customer support, etc.</value>
        [DataMember(Name="sellerActionToRelease", EmitDefaultValue=false)]
        public string SellerActionToRelease { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SellerActionsToRelease {\n");
            sb.Append("  SellerActionToRelease: ").Append(SellerActionToRelease).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SellerActionsToRelease);
        }

        /// <summary>
        /// Returns true if SellerActionsToRelease instances are equal
        /// </summary>
        /// <param name="input">Instance of SellerActionsToRelease to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellerActionsToRelease input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SellerActionToRelease == input.SellerActionToRelease ||
                    (this.SellerActionToRelease != null &&
                    this.SellerActionToRelease.Equals(input.SellerActionToRelease))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerActionToRelease != null)
                    hashCode = hashCode * 59 + this.SellerActionToRelease.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
