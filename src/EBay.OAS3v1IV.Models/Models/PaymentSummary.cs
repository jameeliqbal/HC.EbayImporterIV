/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace eBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type contains information about the various monetary exchanges that apply to the net balance due for the order.
    /// </summary>
    [DataContract]
        public partial class PaymentSummary :  IEquatable<PaymentSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSummary" /> class.
        /// </summary>
        /// <param name="payments">This array consists of payment information for the order, including payment status, payment method, payment amount, and payment date. This array is always returned, although some of the fields under this container will not be returned until payment has been made..</param>
        /// <param name="refunds">This array is always returned, but is returned as an empty array unless the seller has submitted a partial or full refund to the buyer for the order. If a refund has occurred, the refund amount and refund date will be shown for each refund..</param>
        /// <param name="totalDueSeller">totalDueSeller.</param>
        public PaymentSummary(List<Payment> payments = default(List<Payment>), List<OrderRefund> refunds = default(List<OrderRefund>), Amount totalDueSeller = default(Amount))
        {
            this.Payments = payments;
            this.Refunds = refunds;
            this.TotalDueSeller = totalDueSeller;
        }
        
        /// <summary>
        /// This array consists of payment information for the order, including payment status, payment method, payment amount, and payment date. This array is always returned, although some of the fields under this container will not be returned until payment has been made.
        /// </summary>
        /// <value>This array consists of payment information for the order, including payment status, payment method, payment amount, and payment date. This array is always returned, although some of the fields under this container will not be returned until payment has been made.</value>
        [DataMember(Name="payments", EmitDefaultValue=false)]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// This array is always returned, but is returned as an empty array unless the seller has submitted a partial or full refund to the buyer for the order. If a refund has occurred, the refund amount and refund date will be shown for each refund.
        /// </summary>
        /// <value>This array is always returned, but is returned as an empty array unless the seller has submitted a partial or full refund to the buyer for the order. If a refund has occurred, the refund amount and refund date will be shown for each refund.</value>
        [DataMember(Name="refunds", EmitDefaultValue=false)]
        public List<OrderRefund> Refunds { get; set; }

        /// <summary>
        /// Gets or Sets TotalDueSeller
        /// </summary>
        [DataMember(Name="totalDueSeller", EmitDefaultValue=false)]
        public Amount TotalDueSeller { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentSummary {\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("  TotalDueSeller: ").Append(TotalDueSeller).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentSummary);
        }

        /// <summary>
        /// Returns true if PaymentSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                ) && 
                (
                    this.Refunds == input.Refunds ||
                    this.Refunds != null &&
                    input.Refunds != null &&
                    this.Refunds.SequenceEqual(input.Refunds)
                ) && 
                (
                    this.TotalDueSeller == input.TotalDueSeller ||
                    (this.TotalDueSeller != null &&
                    this.TotalDueSeller.Equals(input.TotalDueSeller))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Payments != null)
                    hashCode = hashCode * 59 + this.Payments.GetHashCode();
                if (this.Refunds != null)
                    hashCode = hashCode * 59 + this.Refunds.GetHashCode();
                if (this.TotalDueSeller != null)
                    hashCode = hashCode * 59 + this.TotalDueSeller.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
