/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace eBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type is used for seller provided shipment tracking information.
    /// </summary>
    [DataContract]
        public partial class TrackingInfo :  IEquatable<TrackingInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingInfo" /> class.
        /// </summary>
        /// <param name="shipmentTrackingNumber">This string value represents the shipment tracking number of the package..</param>
        /// <param name="shippingCarrierCode">This string value represents the shipping carrier used to ship the package..</param>
        public TrackingInfo(string shipmentTrackingNumber = default(string), string shippingCarrierCode = default(string))
        {
            this.ShipmentTrackingNumber = shipmentTrackingNumber;
            this.ShippingCarrierCode = shippingCarrierCode;
        }
        
        /// <summary>
        /// This string value represents the shipment tracking number of the package.
        /// </summary>
        /// <value>This string value represents the shipment tracking number of the package.</value>
        [DataMember(Name="shipmentTrackingNumber", EmitDefaultValue=false)]
        public string ShipmentTrackingNumber { get; set; }

        /// <summary>
        /// This string value represents the shipping carrier used to ship the package.
        /// </summary>
        /// <value>This string value represents the shipping carrier used to ship the package.</value>
        [DataMember(Name="shippingCarrierCode", EmitDefaultValue=false)]
        public string ShippingCarrierCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackingInfo {\n");
            sb.Append("  ShipmentTrackingNumber: ").Append(ShipmentTrackingNumber).Append("\n");
            sb.Append("  ShippingCarrierCode: ").Append(ShippingCarrierCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackingInfo);
        }

        /// <summary>
        /// Returns true if TrackingInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackingInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipmentTrackingNumber == input.ShipmentTrackingNumber ||
                    (this.ShipmentTrackingNumber != null &&
                    this.ShipmentTrackingNumber.Equals(input.ShipmentTrackingNumber))
                ) && 
                (
                    this.ShippingCarrierCode == input.ShippingCarrierCode ||
                    (this.ShippingCarrierCode != null &&
                    this.ShippingCarrierCode.Equals(input.ShippingCarrierCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipmentTrackingNumber != null)
                    hashCode = hashCode * 59 + this.ShipmentTrackingNumber.GetHashCode();
                if (this.ShippingCarrierCode != null)
                    hashCode = hashCode * 59 + this.ShippingCarrierCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
