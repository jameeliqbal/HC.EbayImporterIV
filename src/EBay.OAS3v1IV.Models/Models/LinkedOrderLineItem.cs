/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace eBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type contains data on a line item that is related to, but not a part of the order.
    /// </summary>
    [DataContract]
        public partial class LinkedOrderLineItem :  IEquatable<LinkedOrderLineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkedOrderLineItem" /> class.
        /// </summary>
        /// <param name="lineItemAspects">This array contains the complete set of items aspects for the linked line item. For example:&lt;br&gt;&lt;pre&gt;\&quot;lineItemAspects\&quot;: [&lt;br&gt;    {&lt;br&gt;        \&quot;name\&quot;: \&quot;Tire Type\&quot;,&lt;br&gt;        \&quot;value\&quot;: \&quot;All Season\&quot;&lt;br&gt;    },&lt;br&gt;&lt;br&gt;    ...&lt;br&gt; &lt;br&gt;    {&lt;br&gt;        \&quot;name\&quot;: \&quot;Car Type\&quot;,&lt;br&gt;        \&quot;value\&quot;: \&quot;Performance\&quot;&lt;br&gt;    }&lt;br&gt;]&lt;/pre&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; All item specifics for the listing are returned. The name/value pairs returned are in the language of the linked line item&#x27;s listing site, which may vary from the seller&#x27;s language.&lt;/span&gt;.</param>
        /// <param name="lineItemId">The unique identifier of the linked order line item..</param>
        /// <param name="maxEstimatedDeliveryDate">The end of the date range in which the linked line item is expected to be delivered to the shipping address..</param>
        /// <param name="minEstimatedDeliveryDate">The beginning of the date range in which the linked line item is expected to be delivered to the shipping address..</param>
        /// <param name="orderId">The unique identifier of the order to which the linked line item belongs..</param>
        /// <param name="sellerId">The eBay user ID of the seller who sold the linked line item. For example, the user ID of the tire seller..</param>
        /// <param name="shipments">An array containing any shipment tracking information available for the linked line item..</param>
        /// <param name="title">The listing title of the linked line item.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The Item ID value for the listing will be returned in this field instead of the actual title if this particular listing is on-hold due to an eBay policy violation.&lt;/span&gt;.</param>
        public LinkedOrderLineItem(List<NameValuePair> lineItemAspects = default(List<NameValuePair>), string lineItemId = default(string), string maxEstimatedDeliveryDate = default(string), string minEstimatedDeliveryDate = default(string), string orderId = default(string), string sellerId = default(string), List<TrackingInfo> shipments = default(List<TrackingInfo>), string title = default(string))
        {
            this.LineItemAspects = lineItemAspects;
            this.LineItemId = lineItemId;
            this.MaxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
            this.MinEstimatedDeliveryDate = minEstimatedDeliveryDate;
            this.OrderId = orderId;
            this.SellerId = sellerId;
            this.Shipments = shipments;
            this.Title = title;
        }
        
        /// <summary>
        /// This array contains the complete set of items aspects for the linked line item. For example:&lt;br&gt;&lt;pre&gt;\&quot;lineItemAspects\&quot;: [&lt;br&gt;    {&lt;br&gt;        \&quot;name\&quot;: \&quot;Tire Type\&quot;,&lt;br&gt;        \&quot;value\&quot;: \&quot;All Season\&quot;&lt;br&gt;    },&lt;br&gt;&lt;br&gt;    ...&lt;br&gt; &lt;br&gt;    {&lt;br&gt;        \&quot;name\&quot;: \&quot;Car Type\&quot;,&lt;br&gt;        \&quot;value\&quot;: \&quot;Performance\&quot;&lt;br&gt;    }&lt;br&gt;]&lt;/pre&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; All item specifics for the listing are returned. The name/value pairs returned are in the language of the linked line item&#x27;s listing site, which may vary from the seller&#x27;s language.&lt;/span&gt;
        /// </summary>
        /// <value>This array contains the complete set of items aspects for the linked line item. For example:&lt;br&gt;&lt;pre&gt;\&quot;lineItemAspects\&quot;: [&lt;br&gt;    {&lt;br&gt;        \&quot;name\&quot;: \&quot;Tire Type\&quot;,&lt;br&gt;        \&quot;value\&quot;: \&quot;All Season\&quot;&lt;br&gt;    },&lt;br&gt;&lt;br&gt;    ...&lt;br&gt; &lt;br&gt;    {&lt;br&gt;        \&quot;name\&quot;: \&quot;Car Type\&quot;,&lt;br&gt;        \&quot;value\&quot;: \&quot;Performance\&quot;&lt;br&gt;    }&lt;br&gt;]&lt;/pre&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; All item specifics for the listing are returned. The name/value pairs returned are in the language of the linked line item&#x27;s listing site, which may vary from the seller&#x27;s language.&lt;/span&gt;</value>
        [DataMember(Name="lineItemAspects", EmitDefaultValue=false)]
        public List<NameValuePair> LineItemAspects { get; set; }

        /// <summary>
        /// The unique identifier of the linked order line item.
        /// </summary>
        /// <value>The unique identifier of the linked order line item.</value>
        [DataMember(Name="lineItemId", EmitDefaultValue=false)]
        public string LineItemId { get; set; }

        /// <summary>
        /// The end of the date range in which the linked line item is expected to be delivered to the shipping address.
        /// </summary>
        /// <value>The end of the date range in which the linked line item is expected to be delivered to the shipping address.</value>
        [DataMember(Name="maxEstimatedDeliveryDate", EmitDefaultValue=false)]
        public string MaxEstimatedDeliveryDate { get; set; }

        /// <summary>
        /// The beginning of the date range in which the linked line item is expected to be delivered to the shipping address.
        /// </summary>
        /// <value>The beginning of the date range in which the linked line item is expected to be delivered to the shipping address.</value>
        [DataMember(Name="minEstimatedDeliveryDate", EmitDefaultValue=false)]
        public string MinEstimatedDeliveryDate { get; set; }

        /// <summary>
        /// The unique identifier of the order to which the linked line item belongs.
        /// </summary>
        /// <value>The unique identifier of the order to which the linked line item belongs.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// The eBay user ID of the seller who sold the linked line item. For example, the user ID of the tire seller.
        /// </summary>
        /// <value>The eBay user ID of the seller who sold the linked line item. For example, the user ID of the tire seller.</value>
        [DataMember(Name="sellerId", EmitDefaultValue=false)]
        public string SellerId { get; set; }

        /// <summary>
        /// An array containing any shipment tracking information available for the linked line item.
        /// </summary>
        /// <value>An array containing any shipment tracking information available for the linked line item.</value>
        [DataMember(Name="shipments", EmitDefaultValue=false)]
        public List<TrackingInfo> Shipments { get; set; }

        /// <summary>
        /// The listing title of the linked line item.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The Item ID value for the listing will be returned in this field instead of the actual title if this particular listing is on-hold due to an eBay policy violation.&lt;/span&gt;
        /// </summary>
        /// <value>The listing title of the linked line item.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The Item ID value for the listing will be returned in this field instead of the actual title if this particular listing is on-hold due to an eBay policy violation.&lt;/span&gt;</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinkedOrderLineItem {\n");
            sb.Append("  LineItemAspects: ").Append(LineItemAspects).Append("\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("  MaxEstimatedDeliveryDate: ").Append(MaxEstimatedDeliveryDate).Append("\n");
            sb.Append("  MinEstimatedDeliveryDate: ").Append(MinEstimatedDeliveryDate).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkedOrderLineItem);
        }

        /// <summary>
        /// Returns true if LinkedOrderLineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkedOrderLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkedOrderLineItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LineItemAspects == input.LineItemAspects ||
                    this.LineItemAspects != null &&
                    input.LineItemAspects != null &&
                    this.LineItemAspects.SequenceEqual(input.LineItemAspects)
                ) && 
                (
                    this.LineItemId == input.LineItemId ||
                    (this.LineItemId != null &&
                    this.LineItemId.Equals(input.LineItemId))
                ) && 
                (
                    this.MaxEstimatedDeliveryDate == input.MaxEstimatedDeliveryDate ||
                    (this.MaxEstimatedDeliveryDate != null &&
                    this.MaxEstimatedDeliveryDate.Equals(input.MaxEstimatedDeliveryDate))
                ) && 
                (
                    this.MinEstimatedDeliveryDate == input.MinEstimatedDeliveryDate ||
                    (this.MinEstimatedDeliveryDate != null &&
                    this.MinEstimatedDeliveryDate.Equals(input.MinEstimatedDeliveryDate))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.SellerId == input.SellerId ||
                    (this.SellerId != null &&
                    this.SellerId.Equals(input.SellerId))
                ) && 
                (
                    this.Shipments == input.Shipments ||
                    this.Shipments != null &&
                    input.Shipments != null &&
                    this.Shipments.SequenceEqual(input.Shipments)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LineItemAspects != null)
                    hashCode = hashCode * 59 + this.LineItemAspects.GetHashCode();
                if (this.LineItemId != null)
                    hashCode = hashCode * 59 + this.LineItemId.GetHashCode();
                if (this.MaxEstimatedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.MaxEstimatedDeliveryDate.GetHashCode();
                if (this.MinEstimatedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.MinEstimatedDeliveryDate.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.SellerId != null)
                    hashCode = hashCode * 59 + this.SellerId.GetHashCode();
                if (this.Shipments != null)
                    hashCode = hashCode * 59 + this.Shipments.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
