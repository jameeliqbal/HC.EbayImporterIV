/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace eBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type is used by the &lt;strong&gt;resolution&lt;/strong&gt; container that is returned for payment disputes that have been resolved.
    /// </summary>
    [DataContract]
        public partial class PaymentDisputeOutcomeDetail :  IEquatable<PaymentDisputeOutcomeDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDisputeOutcomeDetail" /> class.
        /// </summary>
        /// <param name="fees">fees.</param>
        /// <param name="protectedAmount">protectedAmount.</param>
        /// <param name="protectionStatus">This enumeration value indicates if the seller is fully protected, partially protected, or not protected by eBay for the payment dispute. This field is always returned once the payment dispute is resolved. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ProtectionStatusEnum&#x27;&gt;eBay API documentation&lt;/a&gt;.</param>
        /// <param name="reasonForClosure">The enumeration value returned in this field indicates the outcome of the payment dispute for the seller. This field is always returned once the payment dispute is resolved. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:OutcomeEnum&#x27;&gt;eBay API documentation&lt;/a&gt;.</param>
        /// <param name="recoupAmount">recoupAmount.</param>
        /// <param name="totalFeeCredit">totalFeeCredit.</param>
        public PaymentDisputeOutcomeDetail(SimpleAmount fees = default(SimpleAmount), SimpleAmount protectedAmount = default(SimpleAmount), string protectionStatus = default(string), string reasonForClosure = default(string), SimpleAmount recoupAmount = default(SimpleAmount), SimpleAmount totalFeeCredit = default(SimpleAmount))
        {
            this.Fees = fees;
            this.ProtectedAmount = protectedAmount;
            this.ProtectionStatus = protectionStatus;
            this.ReasonForClosure = reasonForClosure;
            this.RecoupAmount = recoupAmount;
            this.TotalFeeCredit = totalFeeCredit;
        }
        
        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public SimpleAmount Fees { get; set; }

        /// <summary>
        /// Gets or Sets ProtectedAmount
        /// </summary>
        [DataMember(Name="protectedAmount", EmitDefaultValue=false)]
        public SimpleAmount ProtectedAmount { get; set; }

        /// <summary>
        /// This enumeration value indicates if the seller is fully protected, partially protected, or not protected by eBay for the payment dispute. This field is always returned once the payment dispute is resolved. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ProtectionStatusEnum&#x27;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>This enumeration value indicates if the seller is fully protected, partially protected, or not protected by eBay for the payment dispute. This field is always returned once the payment dispute is resolved. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ProtectionStatusEnum&#x27;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="protectionStatus", EmitDefaultValue=false)]
        public string ProtectionStatus { get; set; }

        /// <summary>
        /// The enumeration value returned in this field indicates the outcome of the payment dispute for the seller. This field is always returned once the payment dispute is resolved. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:OutcomeEnum&#x27;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The enumeration value returned in this field indicates the outcome of the payment dispute for the seller. This field is always returned once the payment dispute is resolved. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:OutcomeEnum&#x27;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="reasonForClosure", EmitDefaultValue=false)]
        public string ReasonForClosure { get; set; }

        /// <summary>
        /// Gets or Sets RecoupAmount
        /// </summary>
        [DataMember(Name="recoupAmount", EmitDefaultValue=false)]
        public SimpleAmount RecoupAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalFeeCredit
        /// </summary>
        [DataMember(Name="totalFeeCredit", EmitDefaultValue=false)]
        public SimpleAmount TotalFeeCredit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentDisputeOutcomeDetail {\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  ProtectedAmount: ").Append(ProtectedAmount).Append("\n");
            sb.Append("  ProtectionStatus: ").Append(ProtectionStatus).Append("\n");
            sb.Append("  ReasonForClosure: ").Append(ReasonForClosure).Append("\n");
            sb.Append("  RecoupAmount: ").Append(RecoupAmount).Append("\n");
            sb.Append("  TotalFeeCredit: ").Append(TotalFeeCredit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentDisputeOutcomeDetail);
        }

        /// <summary>
        /// Returns true if PaymentDisputeOutcomeDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentDisputeOutcomeDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentDisputeOutcomeDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fees == input.Fees ||
                    (this.Fees != null &&
                    this.Fees.Equals(input.Fees))
                ) && 
                (
                    this.ProtectedAmount == input.ProtectedAmount ||
                    (this.ProtectedAmount != null &&
                    this.ProtectedAmount.Equals(input.ProtectedAmount))
                ) && 
                (
                    this.ProtectionStatus == input.ProtectionStatus ||
                    (this.ProtectionStatus != null &&
                    this.ProtectionStatus.Equals(input.ProtectionStatus))
                ) && 
                (
                    this.ReasonForClosure == input.ReasonForClosure ||
                    (this.ReasonForClosure != null &&
                    this.ReasonForClosure.Equals(input.ReasonForClosure))
                ) && 
                (
                    this.RecoupAmount == input.RecoupAmount ||
                    (this.RecoupAmount != null &&
                    this.RecoupAmount.Equals(input.RecoupAmount))
                ) && 
                (
                    this.TotalFeeCredit == input.TotalFeeCredit ||
                    (this.TotalFeeCredit != null &&
                    this.TotalFeeCredit.Equals(input.TotalFeeCredit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.ProtectedAmount != null)
                    hashCode = hashCode * 59 + this.ProtectedAmount.GetHashCode();
                if (this.ProtectionStatus != null)
                    hashCode = hashCode * 59 + this.ProtectionStatus.GetHashCode();
                if (this.ReasonForClosure != null)
                    hashCode = hashCode * 59 + this.ReasonForClosure.GetHashCode();
                if (this.RecoupAmount != null)
                    hashCode = hashCode * 59 + this.RecoupAmount.GetHashCode();
                if (this.TotalFeeCredit != null)
                    hashCode = hashCode * 59 + this.TotalFeeCredit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
