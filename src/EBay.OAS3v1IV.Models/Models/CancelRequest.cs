/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace EBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type contains information about a buyer request to cancel an order.
    /// </summary>
    [DataContract]
        public partial class CancelRequest :  IEquatable<CancelRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelRequest" /> class.
        /// </summary>
        /// <param name="cancelCompletedDate">The date and time that the order cancellation was completed, if applicable. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the cancellation request has actually been approved by the seller.&lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;.</param>
        /// <param name="cancelInitiator">This string value indicates the party who made the initial cancellation request. Typically, either the &#x27;Buyer&#x27; or &#x27;Seller&#x27;. If a cancellation request has been made, this field should be returned..</param>
        /// <param name="cancelReason">The reason why the &lt;b&gt;cancelInitiator&lt;/b&gt; initiated the cancellation request. Cancellation reasons for a buyer might include &#x27;order placed by mistake&#x27; or &#x27;order won&#x27;t arrive in time&#x27;. For a seller, a typical cancellation reason is &#x27;out of stock&#x27;. If a cancellation request has been made, this field should be returned..</param>
        /// <param name="cancelRequestedDate">The date and time that the order cancellation was requested. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is returned for each cancellation request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;.</param>
        /// <param name="cancelRequestId">The unique identifier of the order cancellation request. This field is returned for each cancellation request..</param>
        /// <param name="cancelRequestState">The current stage or condition of the cancellation request. This field is returned for each cancellation request. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:CancelRequestStateEnum&#x27;&gt;eBay API documentation&lt;/a&gt;.</param>
        public CancelRequest(string cancelCompletedDate = default(string), string cancelInitiator = default(string), string cancelReason = default(string), string cancelRequestedDate = default(string), string cancelRequestId = default(string), string cancelRequestState = default(string))
        {
            this.CancelCompletedDate = cancelCompletedDate;
            this.CancelInitiator = cancelInitiator;
            this.CancelReason = cancelReason;
            this.CancelRequestedDate = cancelRequestedDate;
            this.CancelRequestId = cancelRequestId;
            this.CancelRequestState = cancelRequestState;
        }
        
        /// <summary>
        /// The date and time that the order cancellation was completed, if applicable. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the cancellation request has actually been approved by the seller.&lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;
        /// </summary>
        /// <value>The date and time that the order cancellation was completed, if applicable. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the cancellation request has actually been approved by the seller.&lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;</value>
        [DataMember(Name="cancelCompletedDate", EmitDefaultValue=false)]
        public string CancelCompletedDate { get; set; }

        /// <summary>
        /// This string value indicates the party who made the initial cancellation request. Typically, either the &#x27;Buyer&#x27; or &#x27;Seller&#x27;. If a cancellation request has been made, this field should be returned.
        /// </summary>
        /// <value>This string value indicates the party who made the initial cancellation request. Typically, either the &#x27;Buyer&#x27; or &#x27;Seller&#x27;. If a cancellation request has been made, this field should be returned.</value>
        [DataMember(Name="cancelInitiator", EmitDefaultValue=false)]
        public string CancelInitiator { get; set; }

        /// <summary>
        /// The reason why the &lt;b&gt;cancelInitiator&lt;/b&gt; initiated the cancellation request. Cancellation reasons for a buyer might include &#x27;order placed by mistake&#x27; or &#x27;order won&#x27;t arrive in time&#x27;. For a seller, a typical cancellation reason is &#x27;out of stock&#x27;. If a cancellation request has been made, this field should be returned.
        /// </summary>
        /// <value>The reason why the &lt;b&gt;cancelInitiator&lt;/b&gt; initiated the cancellation request. Cancellation reasons for a buyer might include &#x27;order placed by mistake&#x27; or &#x27;order won&#x27;t arrive in time&#x27;. For a seller, a typical cancellation reason is &#x27;out of stock&#x27;. If a cancellation request has been made, this field should be returned.</value>
        [DataMember(Name="cancelReason", EmitDefaultValue=false)]
        public string CancelReason { get; set; }

        /// <summary>
        /// The date and time that the order cancellation was requested. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is returned for each cancellation request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;
        /// </summary>
        /// <value>The date and time that the order cancellation was requested. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is returned for each cancellation request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;</value>
        [DataMember(Name="cancelRequestedDate", EmitDefaultValue=false)]
        public string CancelRequestedDate { get; set; }

        /// <summary>
        /// The unique identifier of the order cancellation request. This field is returned for each cancellation request.
        /// </summary>
        /// <value>The unique identifier of the order cancellation request. This field is returned for each cancellation request.</value>
        [DataMember(Name="cancelRequestId", EmitDefaultValue=false)]
        public string CancelRequestId { get; set; }

        /// <summary>
        /// The current stage or condition of the cancellation request. This field is returned for each cancellation request. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:CancelRequestStateEnum&#x27;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The current stage or condition of the cancellation request. This field is returned for each cancellation request. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:CancelRequestStateEnum&#x27;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="cancelRequestState", EmitDefaultValue=false)]
        public string CancelRequestState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CancelRequest {\n");
            sb.Append("  CancelCompletedDate: ").Append(CancelCompletedDate).Append("\n");
            sb.Append("  CancelInitiator: ").Append(CancelInitiator).Append("\n");
            sb.Append("  CancelReason: ").Append(CancelReason).Append("\n");
            sb.Append("  CancelRequestedDate: ").Append(CancelRequestedDate).Append("\n");
            sb.Append("  CancelRequestId: ").Append(CancelRequestId).Append("\n");
            sb.Append("  CancelRequestState: ").Append(CancelRequestState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CancelRequest);
        }

        /// <summary>
        /// Returns true if CancelRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CancelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CancelRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CancelCompletedDate == input.CancelCompletedDate ||
                    (this.CancelCompletedDate != null &&
                    this.CancelCompletedDate.Equals(input.CancelCompletedDate))
                ) && 
                (
                    this.CancelInitiator == input.CancelInitiator ||
                    (this.CancelInitiator != null &&
                    this.CancelInitiator.Equals(input.CancelInitiator))
                ) && 
                (
                    this.CancelReason == input.CancelReason ||
                    (this.CancelReason != null &&
                    this.CancelReason.Equals(input.CancelReason))
                ) && 
                (
                    this.CancelRequestedDate == input.CancelRequestedDate ||
                    (this.CancelRequestedDate != null &&
                    this.CancelRequestedDate.Equals(input.CancelRequestedDate))
                ) && 
                (
                    this.CancelRequestId == input.CancelRequestId ||
                    (this.CancelRequestId != null &&
                    this.CancelRequestId.Equals(input.CancelRequestId))
                ) && 
                (
                    this.CancelRequestState == input.CancelRequestState ||
                    (this.CancelRequestState != null &&
                    this.CancelRequestState.Equals(input.CancelRequestState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CancelCompletedDate != null)
                    hashCode = hashCode * 59 + this.CancelCompletedDate.GetHashCode();
                if (this.CancelInitiator != null)
                    hashCode = hashCode * 59 + this.CancelInitiator.GetHashCode();
                if (this.CancelReason != null)
                    hashCode = hashCode * 59 + this.CancelReason.GetHashCode();
                if (this.CancelRequestedDate != null)
                    hashCode = hashCode * 59 + this.CancelRequestedDate.GetHashCode();
                if (this.CancelRequestId != null)
                    hashCode = hashCode * 59 + this.CancelRequestId.GetHashCode();
                if (this.CancelRequestState != null)
                    hashCode = hashCode * 59 + this.CancelRequestState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
