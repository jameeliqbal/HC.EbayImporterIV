/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace eBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type contains a summary of cumulative costs and charges for all line items of an order, including item price, price adjustments, sales taxes, delivery costs, and order discounts.
    /// </summary>
    [DataContract]
        public partial class PricingSummary :  IEquatable<PricingSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingSummary" /> class.
        /// </summary>
        /// <param name="adjustment">adjustment.</param>
        /// <param name="deliveryCost">deliveryCost.</param>
        /// <param name="deliveryDiscount">deliveryDiscount.</param>
        /// <param name="fee">fee.</param>
        /// <param name="priceDiscount">priceDiscount.</param>
        /// <param name="priceSubtotal">priceSubtotal.</param>
        /// <param name="tax">tax.</param>
        /// <param name="total">total.</param>
        public PricingSummary(Amount adjustment = default(Amount), Amount deliveryCost = default(Amount), Amount deliveryDiscount = default(Amount), Amount fee = default(Amount), Amount priceDiscount = default(Amount), Amount priceSubtotal = default(Amount), Amount tax = default(Amount), Amount total = default(Amount))
        {
            this.Adjustment = adjustment;
            this.DeliveryCost = deliveryCost;
            this.DeliveryDiscount = deliveryDiscount;
            this.Fee = fee;
            this.PriceDiscount = priceDiscount;
            this.PriceSubtotal = priceSubtotal;
            this.Tax = tax;
            this.Total = total;
        }
        
        /// <summary>
        /// Gets or Sets Adjustment
        /// </summary>
        [DataMember(Name="adjustment", EmitDefaultValue=false)]
        public Amount Adjustment { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryCost
        /// </summary>
        [DataMember(Name="deliveryCost", EmitDefaultValue=false)]
        public Amount DeliveryCost { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryDiscount
        /// </summary>
        [DataMember(Name="deliveryDiscount", EmitDefaultValue=false)]
        public Amount DeliveryDiscount { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public Amount Fee { get; set; }

        /// <summary>
        /// Gets or Sets PriceDiscount
        /// </summary>
        [DataMember(Name="priceDiscount", EmitDefaultValue=false)]
        public Amount PriceDiscount { get; set; }

        /// <summary>
        /// Gets or Sets PriceSubtotal
        /// </summary>
        [DataMember(Name="priceSubtotal", EmitDefaultValue=false)]
        public Amount PriceSubtotal { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public Amount Tax { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public Amount Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PricingSummary {\n");
            sb.Append("  Adjustment: ").Append(Adjustment).Append("\n");
            sb.Append("  DeliveryCost: ").Append(DeliveryCost).Append("\n");
            sb.Append("  DeliveryDiscount: ").Append(DeliveryDiscount).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  PriceDiscount: ").Append(PriceDiscount).Append("\n");
            sb.Append("  PriceSubtotal: ").Append(PriceSubtotal).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PricingSummary);
        }

        /// <summary>
        /// Returns true if PricingSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of PricingSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PricingSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Adjustment == input.Adjustment ||
                    (this.Adjustment != null &&
                    this.Adjustment.Equals(input.Adjustment))
                ) && 
                (
                    this.DeliveryCost == input.DeliveryCost ||
                    (this.DeliveryCost != null &&
                    this.DeliveryCost.Equals(input.DeliveryCost))
                ) && 
                (
                    this.DeliveryDiscount == input.DeliveryDiscount ||
                    (this.DeliveryDiscount != null &&
                    this.DeliveryDiscount.Equals(input.DeliveryDiscount))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.PriceDiscount == input.PriceDiscount ||
                    (this.PriceDiscount != null &&
                    this.PriceDiscount.Equals(input.PriceDiscount))
                ) && 
                (
                    this.PriceSubtotal == input.PriceSubtotal ||
                    (this.PriceSubtotal != null &&
                    this.PriceSubtotal.Equals(input.PriceSubtotal))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Adjustment != null)
                    hashCode = hashCode * 59 + this.Adjustment.GetHashCode();
                if (this.DeliveryCost != null)
                    hashCode = hashCode * 59 + this.DeliveryCost.GetHashCode();
                if (this.DeliveryDiscount != null)
                    hashCode = hashCode * 59 + this.DeliveryDiscount.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.PriceDiscount != null)
                    hashCode = hashCode * 59 + this.PriceDiscount.GetHashCode();
                if (this.PriceSubtotal != null)
                    hashCode = hashCode * 59 + this.PriceSubtotal.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
