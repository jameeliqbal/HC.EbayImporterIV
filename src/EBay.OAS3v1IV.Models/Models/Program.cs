/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace EBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type is returned for order line items eligible for the Authenticity Guarantee service and/or for order line items fulfilled by the eBay Fulfillment program or eBay shipping.
    /// </summary>
    [DataContract]
        public partial class Program :  IEquatable<Program>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Program" /> class.
        /// </summary>
        /// <param name="authenticityVerification">authenticityVerification.</param>
        /// <param name="ebayShipping">ebayShipping.</param>
        /// <param name="ebayVault">ebayVault.</param>
        /// <param name="ebayInternationalShipping">ebayInternationalShipping.</param>
        /// <param name="fulfillmentProgram">fulfillmentProgram.</param>
        public Program(PostSaleAuthenticationProgram authenticityVerification = default(PostSaleAuthenticationProgram), EbayShipping ebayShipping = default(EbayShipping), EbayVaultProgram ebayVault = default(EbayVaultProgram), EbayInternationalShipping ebayInternationalShipping = default(EbayInternationalShipping), EbayFulfillmentProgram fulfillmentProgram = default(EbayFulfillmentProgram))
        {
            this.AuthenticityVerification = authenticityVerification;
            this.EbayShipping = ebayShipping;
            this.EbayVault = ebayVault;
            this.EbayInternationalShipping = ebayInternationalShipping;
            this.FulfillmentProgram = fulfillmentProgram;
        }
        
        /// <summary>
        /// Gets or Sets AuthenticityVerification
        /// </summary>
        [DataMember(Name="authenticityVerification", EmitDefaultValue=false)]
        public PostSaleAuthenticationProgram AuthenticityVerification { get; set; }

        /// <summary>
        /// Gets or Sets EbayShipping
        /// </summary>
        [DataMember(Name="ebayShipping", EmitDefaultValue=false)]
        public EbayShipping EbayShipping { get; set; }

        /// <summary>
        /// Gets or Sets EbayVault
        /// </summary>
        [DataMember(Name="ebayVault", EmitDefaultValue=false)]
        public EbayVaultProgram EbayVault { get; set; }

        /// <summary>
        /// Gets or Sets EbayInternationalShipping
        /// </summary>
        [DataMember(Name="ebayInternationalShipping", EmitDefaultValue=false)]
        public EbayInternationalShipping EbayInternationalShipping { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentProgram
        /// </summary>
        [DataMember(Name="fulfillmentProgram", EmitDefaultValue=false)]
        public EbayFulfillmentProgram FulfillmentProgram { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Program {\n");
            sb.Append("  AuthenticityVerification: ").Append(AuthenticityVerification).Append("\n");
            sb.Append("  EbayShipping: ").Append(EbayShipping).Append("\n");
            sb.Append("  EbayVault: ").Append(EbayVault).Append("\n");
            sb.Append("  EbayInternationalShipping: ").Append(EbayInternationalShipping).Append("\n");
            sb.Append("  FulfillmentProgram: ").Append(FulfillmentProgram).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Program);
        }

        /// <summary>
        /// Returns true if Program instances are equal
        /// </summary>
        /// <param name="input">Instance of Program to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Program input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthenticityVerification == input.AuthenticityVerification ||
                    (this.AuthenticityVerification != null &&
                    this.AuthenticityVerification.Equals(input.AuthenticityVerification))
                ) && 
                (
                    this.EbayShipping == input.EbayShipping ||
                    (this.EbayShipping != null &&
                    this.EbayShipping.Equals(input.EbayShipping))
                ) && 
                (
                    this.EbayVault == input.EbayVault ||
                    (this.EbayVault != null &&
                    this.EbayVault.Equals(input.EbayVault))
                ) && 
                (
                    this.EbayInternationalShipping == input.EbayInternationalShipping ||
                    (this.EbayInternationalShipping != null &&
                    this.EbayInternationalShipping.Equals(input.EbayInternationalShipping))
                ) && 
                (
                    this.FulfillmentProgram == input.FulfillmentProgram ||
                    (this.FulfillmentProgram != null &&
                    this.FulfillmentProgram.Equals(input.FulfillmentProgram))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthenticityVerification != null)
                    hashCode = hashCode * 59 + this.AuthenticityVerification.GetHashCode();
                if (this.EbayShipping != null)
                    hashCode = hashCode * 59 + this.EbayShipping.GetHashCode();
                if (this.EbayVault != null)
                    hashCode = hashCode * 59 + this.EbayVault.GetHashCode();
                if (this.EbayInternationalShipping != null)
                    hashCode = hashCode * 59 + this.EbayInternationalShipping.GetHashCode();
                if (this.FulfillmentProgram != null)
                    hashCode = hashCode * 59 + this.FulfillmentProgram.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
