/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace EBay.OAS3v1IV.Models
{
    /// <summary>
    /// The base type used by the request payload of the &lt;b&gt;issueRefund&lt;/b&gt; method.
    /// </summary>
    [DataContract]
        public partial class IssueRefundRequest :  IEquatable<IssueRefundRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueRefundRequest" /> class.
        /// </summary>
        /// <param name="reasonForRefund">The enumeration value passed into this field indicates the reason for the refund. One of the defined enumeration values in the &lt;b&gt;ReasonForRefundEnum&lt;/b&gt; type must be used.&lt;br&gt;&lt;br&gt;This field is required, and it is highly recommended that sellers use the correct refund reason, especially in the case of a buyer-requested cancellation or &#x27;buyer remorse&#x27; return to indicate that there was nothing wrong with the item(s) or with the shipment of the order.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If issuing refunds for more than one order line item, keep in mind that the refund reason must be the same for each of the order line items. If the refund reason is different for one or more order line items in an order, the seller would need to make separate &lt;b&gt;issueRefund&lt;/b&gt; calls, one for each refund reason. &lt;/span&gt; For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ReasonForRefundEnum&#x27;&gt;eBay API documentation&lt;/a&gt;.</param>
        /// <param name="comment">This free-text field allows the seller to clarify why the refund is being issued to the buyer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Max Length&lt;/b&gt;: 100.</param>
        /// <param name="refundItems">The &lt;b&gt;refundItems&lt;/b&gt; array is only required if the seller is issuing a refund for one or more individual order line items in a multiple line item order. Otherwise, the seller just uses the &lt;b&gt;orderLevelRefundAmount&lt;/b&gt; container to specify the amount of the refund for the entire order..</param>
        /// <param name="orderLevelRefundAmount">orderLevelRefundAmount.</param>
        public IssueRefundRequest(string reasonForRefund = default(string), string comment = default(string), List<RefundItem> refundItems = default(List<RefundItem>), SimpleAmount orderLevelRefundAmount = default(SimpleAmount))
        {
            this.ReasonForRefund = reasonForRefund;
            this.Comment = comment;
            this.RefundItems = refundItems;
            this.OrderLevelRefundAmount = orderLevelRefundAmount;
        }
        
        /// <summary>
        /// The enumeration value passed into this field indicates the reason for the refund. One of the defined enumeration values in the &lt;b&gt;ReasonForRefundEnum&lt;/b&gt; type must be used.&lt;br&gt;&lt;br&gt;This field is required, and it is highly recommended that sellers use the correct refund reason, especially in the case of a buyer-requested cancellation or &#x27;buyer remorse&#x27; return to indicate that there was nothing wrong with the item(s) or with the shipment of the order.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If issuing refunds for more than one order line item, keep in mind that the refund reason must be the same for each of the order line items. If the refund reason is different for one or more order line items in an order, the seller would need to make separate &lt;b&gt;issueRefund&lt;/b&gt; calls, one for each refund reason. &lt;/span&gt; For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ReasonForRefundEnum&#x27;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The enumeration value passed into this field indicates the reason for the refund. One of the defined enumeration values in the &lt;b&gt;ReasonForRefundEnum&lt;/b&gt; type must be used.&lt;br&gt;&lt;br&gt;This field is required, and it is highly recommended that sellers use the correct refund reason, especially in the case of a buyer-requested cancellation or &#x27;buyer remorse&#x27; return to indicate that there was nothing wrong with the item(s) or with the shipment of the order.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If issuing refunds for more than one order line item, keep in mind that the refund reason must be the same for each of the order line items. If the refund reason is different for one or more order line items in an order, the seller would need to make separate &lt;b&gt;issueRefund&lt;/b&gt; calls, one for each refund reason. &lt;/span&gt; For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ReasonForRefundEnum&#x27;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="reasonForRefund", EmitDefaultValue=false)]
        public string ReasonForRefund { get; set; }

        /// <summary>
        /// This free-text field allows the seller to clarify why the refund is being issued to the buyer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Max Length&lt;/b&gt;: 100
        /// </summary>
        /// <value>This free-text field allows the seller to clarify why the refund is being issued to the buyer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Max Length&lt;/b&gt;: 100</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// The &lt;b&gt;refundItems&lt;/b&gt; array is only required if the seller is issuing a refund for one or more individual order line items in a multiple line item order. Otherwise, the seller just uses the &lt;b&gt;orderLevelRefundAmount&lt;/b&gt; container to specify the amount of the refund for the entire order.
        /// </summary>
        /// <value>The &lt;b&gt;refundItems&lt;/b&gt; array is only required if the seller is issuing a refund for one or more individual order line items in a multiple line item order. Otherwise, the seller just uses the &lt;b&gt;orderLevelRefundAmount&lt;/b&gt; container to specify the amount of the refund for the entire order.</value>
        [DataMember(Name="refundItems", EmitDefaultValue=false)]
        public List<RefundItem> RefundItems { get; set; }

        /// <summary>
        /// Gets or Sets OrderLevelRefundAmount
        /// </summary>
        [DataMember(Name="orderLevelRefundAmount", EmitDefaultValue=false)]
        public SimpleAmount OrderLevelRefundAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueRefundRequest {\n");
            sb.Append("  ReasonForRefund: ").Append(ReasonForRefund).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  RefundItems: ").Append(RefundItems).Append("\n");
            sb.Append("  OrderLevelRefundAmount: ").Append(OrderLevelRefundAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssueRefundRequest);
        }

        /// <summary>
        /// Returns true if IssueRefundRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of IssueRefundRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueRefundRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReasonForRefund == input.ReasonForRefund ||
                    (this.ReasonForRefund != null &&
                    this.ReasonForRefund.Equals(input.ReasonForRefund))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.RefundItems == input.RefundItems ||
                    this.RefundItems != null &&
                    input.RefundItems != null &&
                    this.RefundItems.SequenceEqual(input.RefundItems)
                ) && 
                (
                    this.OrderLevelRefundAmount == input.OrderLevelRefundAmount ||
                    (this.OrderLevelRefundAmount != null &&
                    this.OrderLevelRefundAmount.Equals(input.OrderLevelRefundAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReasonForRefund != null)
                    hashCode = hashCode * 59 + this.ReasonForRefund.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.RefundItems != null)
                    hashCode = hashCode * 59 + this.RefundItems.GetHashCode();
                if (this.OrderLevelRefundAmount != null)
                    hashCode = hashCode * 59 + this.OrderLevelRefundAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
