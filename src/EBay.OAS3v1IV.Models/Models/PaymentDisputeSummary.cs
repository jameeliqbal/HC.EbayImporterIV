/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace eBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type is used by each payment dispute that is returned with the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; method.
    /// </summary>
    [DataContract]
        public partial class PaymentDisputeSummary :  IEquatable<PaymentDisputeSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDisputeSummary" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="buyerUsername">This is the buyer&#x27;s eBay user ID. This field is returned for all payment disputes returned in the response..</param>
        /// <param name="closedDate">The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the &lt;code&gt;CLOSED&lt;/code&gt; state.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;..</param>
        /// <param name="openDate">The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;..</param>
        /// <param name="orderId">This is the unique identifier of the order involved in the payment dispute..</param>
        /// <param name="paymentDisputeId">This is the unique identifier of the payment dispute. This identifier is automatically created by eBay once the payment dispute comes into the eBay system. This identifier is passed in at the end of the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; call URI to retrieve a specific payment dispute. The &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method returns more details about a payment dispute than the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; method..</param>
        /// <param name="paymentDisputeStatus">The enumeration value in this field gives the current status of the payment dispute. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum&#x27;&gt;eBay API documentation&lt;/a&gt;.</param>
        /// <param name="reason">The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See &lt;strong&gt;DisputeReasonEnum&lt;/strong&gt; type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum&#x27;&gt;eBay API documentation&lt;/a&gt;.</param>
        /// <param name="respondByDate">The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the &lt;code&gt;ACTION_NEEDED&lt;/code&gt; state. For payment disputes that require action by the seller, that same seller must call &lt;strong&gt;getPaymentDispute&lt;/strong&gt; to see the next action(s) that they can take against the payment dispute.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;..</param>
        public PaymentDisputeSummary(SimpleAmount amount = default(SimpleAmount), string buyerUsername = default(string), string closedDate = default(string), string openDate = default(string), string orderId = default(string), string paymentDisputeId = default(string), string paymentDisputeStatus = default(string), string reason = default(string), string respondByDate = default(string))
        {
            this.Amount = amount;
            this.BuyerUsername = buyerUsername;
            this.ClosedDate = closedDate;
            this.OpenDate = openDate;
            this.OrderId = orderId;
            this.PaymentDisputeId = paymentDisputeId;
            this.PaymentDisputeStatus = paymentDisputeStatus;
            this.Reason = reason;
            this.RespondByDate = respondByDate;
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public SimpleAmount Amount { get; set; }

        /// <summary>
        /// This is the buyer&#x27;s eBay user ID. This field is returned for all payment disputes returned in the response.
        /// </summary>
        /// <value>This is the buyer&#x27;s eBay user ID. This field is returned for all payment disputes returned in the response.</value>
        [DataMember(Name="buyerUsername", EmitDefaultValue=false)]
        public string BuyerUsername { get; set; }

        /// <summary>
        /// The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the &lt;code&gt;CLOSED&lt;/code&gt; state.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
        /// </summary>
        /// <value>The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the &lt;code&gt;CLOSED&lt;/code&gt; state.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.</value>
        [DataMember(Name="closedDate", EmitDefaultValue=false)]
        public string ClosedDate { get; set; }

        /// <summary>
        /// The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
        /// </summary>
        /// <value>The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.</value>
        [DataMember(Name="openDate", EmitDefaultValue=false)]
        public string OpenDate { get; set; }

        /// <summary>
        /// This is the unique identifier of the order involved in the payment dispute.
        /// </summary>
        /// <value>This is the unique identifier of the order involved in the payment dispute.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// This is the unique identifier of the payment dispute. This identifier is automatically created by eBay once the payment dispute comes into the eBay system. This identifier is passed in at the end of the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; call URI to retrieve a specific payment dispute. The &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method returns more details about a payment dispute than the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; method.
        /// </summary>
        /// <value>This is the unique identifier of the payment dispute. This identifier is automatically created by eBay once the payment dispute comes into the eBay system. This identifier is passed in at the end of the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; call URI to retrieve a specific payment dispute. The &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method returns more details about a payment dispute than the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; method.</value>
        [DataMember(Name="paymentDisputeId", EmitDefaultValue=false)]
        public string PaymentDisputeId { get; set; }

        /// <summary>
        /// The enumeration value in this field gives the current status of the payment dispute. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum&#x27;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The enumeration value in this field gives the current status of the payment dispute. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum&#x27;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="paymentDisputeStatus", EmitDefaultValue=false)]
        public string PaymentDisputeStatus { get; set; }

        /// <summary>
        /// The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See &lt;strong&gt;DisputeReasonEnum&lt;/strong&gt; type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum&#x27;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See &lt;strong&gt;DisputeReasonEnum&lt;/strong&gt; type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum&#x27;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the &lt;code&gt;ACTION_NEEDED&lt;/code&gt; state. For payment disputes that require action by the seller, that same seller must call &lt;strong&gt;getPaymentDispute&lt;/strong&gt; to see the next action(s) that they can take against the payment dispute.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
        /// </summary>
        /// <value>The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the &lt;code&gt;ACTION_NEEDED&lt;/code&gt; state. For payment disputes that require action by the seller, that same seller must call &lt;strong&gt;getPaymentDispute&lt;/strong&gt; to see the next action(s) that they can take against the payment dispute.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.</value>
        [DataMember(Name="respondByDate", EmitDefaultValue=false)]
        public string RespondByDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentDisputeSummary {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BuyerUsername: ").Append(BuyerUsername).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  OpenDate: ").Append(OpenDate).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PaymentDisputeId: ").Append(PaymentDisputeId).Append("\n");
            sb.Append("  PaymentDisputeStatus: ").Append(PaymentDisputeStatus).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RespondByDate: ").Append(RespondByDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentDisputeSummary);
        }

        /// <summary>
        /// Returns true if PaymentDisputeSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentDisputeSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentDisputeSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BuyerUsername == input.BuyerUsername ||
                    (this.BuyerUsername != null &&
                    this.BuyerUsername.Equals(input.BuyerUsername))
                ) && 
                (
                    this.ClosedDate == input.ClosedDate ||
                    (this.ClosedDate != null &&
                    this.ClosedDate.Equals(input.ClosedDate))
                ) && 
                (
                    this.OpenDate == input.OpenDate ||
                    (this.OpenDate != null &&
                    this.OpenDate.Equals(input.OpenDate))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PaymentDisputeId == input.PaymentDisputeId ||
                    (this.PaymentDisputeId != null &&
                    this.PaymentDisputeId.Equals(input.PaymentDisputeId))
                ) && 
                (
                    this.PaymentDisputeStatus == input.PaymentDisputeStatus ||
                    (this.PaymentDisputeStatus != null &&
                    this.PaymentDisputeStatus.Equals(input.PaymentDisputeStatus))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.RespondByDate == input.RespondByDate ||
                    (this.RespondByDate != null &&
                    this.RespondByDate.Equals(input.RespondByDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BuyerUsername != null)
                    hashCode = hashCode * 59 + this.BuyerUsername.GetHashCode();
                if (this.ClosedDate != null)
                    hashCode = hashCode * 59 + this.ClosedDate.GetHashCode();
                if (this.OpenDate != null)
                    hashCode = hashCode * 59 + this.OpenDate.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.PaymentDisputeId != null)
                    hashCode = hashCode * 59 + this.PaymentDisputeId.GetHashCode();
                if (this.PaymentDisputeStatus != null)
                    hashCode = hashCode * 59 + this.PaymentDisputeStatus.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.RespondByDate != null)
                    hashCode = hashCode * 59 + this.RespondByDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
