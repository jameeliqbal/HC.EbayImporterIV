/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace EBay.OAS3v1IV.Models
{
    /// <summary>
    /// Type defining the &lt;b&gt;legacyReference&lt;/b&gt; container. This container is needed if the seller is issuing a refund for an individual order line item, and wishes to use an item ID and transaction ID to identify the order line item.
    /// </summary>
    [DataContract]
        public partial class LegacyReference :  IEquatable<LegacyReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegacyReference" /> class.
        /// </summary>
        /// <param name="legacyItemId">The unique identifier of a listing.&lt;br&gt;&lt;br&gt; This value can be found in the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html#Response.OrderArray.Order.TransactionArray.Transaction\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Transaction&lt;/a&gt; container in the response of the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getOrder&lt;/a&gt; call of the &lt;b&gt;Trading API&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Both &lt;b&gt;legacyItemId&lt;/b&gt; and &lt;b&gt;legacyTransactionId&lt;/b&gt; are needed to identify an order line item. &lt;/span&gt;.</param>
        /// <param name="legacyTransactionId">The unique identifier of a sale/transaction in legacy/Trading API format. A &#x27;transaction ID&#x27; is created once a buyer purchases a &#x27;Buy It Now&#x27; item or if an auction listing ends with a winning bidder.&lt;br&gt;&lt;br&gt; This value can be found in the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html#Response.OrderArray.Order.TransactionArray.Transaction\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Transaction&lt;/a&gt; container in the response of the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getOrder&lt;/a&gt; call of the &lt;b&gt;Trading API&lt;/b&gt;. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Both &lt;b&gt;legacyItemId&lt;/b&gt; and &lt;b&gt;legacyTransactionId&lt;/b&gt; are needed to identify an order line item. &lt;/span&gt;.</param>
        public LegacyReference(string legacyItemId = default(string), string legacyTransactionId = default(string))
        {
            this.LegacyItemId = legacyItemId;
            this.LegacyTransactionId = legacyTransactionId;
        }
        
        /// <summary>
        /// The unique identifier of a listing.&lt;br&gt;&lt;br&gt; This value can be found in the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html#Response.OrderArray.Order.TransactionArray.Transaction\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Transaction&lt;/a&gt; container in the response of the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getOrder&lt;/a&gt; call of the &lt;b&gt;Trading API&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Both &lt;b&gt;legacyItemId&lt;/b&gt; and &lt;b&gt;legacyTransactionId&lt;/b&gt; are needed to identify an order line item. &lt;/span&gt;
        /// </summary>
        /// <value>The unique identifier of a listing.&lt;br&gt;&lt;br&gt; This value can be found in the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html#Response.OrderArray.Order.TransactionArray.Transaction\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Transaction&lt;/a&gt; container in the response of the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getOrder&lt;/a&gt; call of the &lt;b&gt;Trading API&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Both &lt;b&gt;legacyItemId&lt;/b&gt; and &lt;b&gt;legacyTransactionId&lt;/b&gt; are needed to identify an order line item. &lt;/span&gt;</value>
        [DataMember(Name="legacyItemId", EmitDefaultValue=false)]
        public string LegacyItemId { get; set; }

        /// <summary>
        /// The unique identifier of a sale/transaction in legacy/Trading API format. A &#x27;transaction ID&#x27; is created once a buyer purchases a &#x27;Buy It Now&#x27; item or if an auction listing ends with a winning bidder.&lt;br&gt;&lt;br&gt; This value can be found in the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html#Response.OrderArray.Order.TransactionArray.Transaction\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Transaction&lt;/a&gt; container in the response of the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getOrder&lt;/a&gt; call of the &lt;b&gt;Trading API&lt;/b&gt;. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Both &lt;b&gt;legacyItemId&lt;/b&gt; and &lt;b&gt;legacyTransactionId&lt;/b&gt; are needed to identify an order line item. &lt;/span&gt;
        /// </summary>
        /// <value>The unique identifier of a sale/transaction in legacy/Trading API format. A &#x27;transaction ID&#x27; is created once a buyer purchases a &#x27;Buy It Now&#x27; item or if an auction listing ends with a winning bidder.&lt;br&gt;&lt;br&gt; This value can be found in the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html#Response.OrderArray.Order.TransactionArray.Transaction\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Transaction&lt;/a&gt; container in the response of the &lt;a href&#x3D;\&quot;/devzone/xml/docs/reference/ebay/getorders.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getOrder&lt;/a&gt; call of the &lt;b&gt;Trading API&lt;/b&gt;. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Both &lt;b&gt;legacyItemId&lt;/b&gt; and &lt;b&gt;legacyTransactionId&lt;/b&gt; are needed to identify an order line item. &lt;/span&gt;</value>
        [DataMember(Name="legacyTransactionId", EmitDefaultValue=false)]
        public string LegacyTransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegacyReference {\n");
            sb.Append("  LegacyItemId: ").Append(LegacyItemId).Append("\n");
            sb.Append("  LegacyTransactionId: ").Append(LegacyTransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegacyReference);
        }

        /// <summary>
        /// Returns true if LegacyReference instances are equal
        /// </summary>
        /// <param name="input">Instance of LegacyReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegacyReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LegacyItemId == input.LegacyItemId ||
                    (this.LegacyItemId != null &&
                    this.LegacyItemId.Equals(input.LegacyItemId))
                ) && 
                (
                    this.LegacyTransactionId == input.LegacyTransactionId ||
                    (this.LegacyTransactionId != null &&
                    this.LegacyTransactionId.Equals(input.LegacyTransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LegacyItemId != null)
                    hashCode = hashCode * 59 + this.LegacyItemId.GetHashCode();
                if (this.LegacyTransactionId != null)
                    hashCode = hashCode * 59 + this.LegacyTransactionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
