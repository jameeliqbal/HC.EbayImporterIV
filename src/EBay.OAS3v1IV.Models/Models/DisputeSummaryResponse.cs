/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace EBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type defines the base response payload of the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; method. Each payment dispute that matches the input criteria is returned under the &lt;strong&gt;paymentDisputeSummaries&lt;/strong&gt; array.
    /// </summary>
    [DataContract]
        public partial class DisputeSummaryResponse :  IEquatable<DisputeSummaryResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DisputeSummaryResponse" /> class.
        /// </summary>
        /// <param name="href">The URI of the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call request that produced the current page of the result set..</param>
        /// <param name="limit">This value shows the maximum number of payment disputes that will appear on one page of the result set. The &lt;strong&gt;limit&lt;/strong&gt; value can be passed in as a query parameter in the request, or if it is not used, it defaults to &lt;code&gt;200&lt;/code&gt;. If the value in the &lt;strong&gt;total&lt;/strong&gt; field exceeds this &lt;strong&gt;limit&lt;/strong&gt; value, there are multiple pages in the current result set.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min&lt;/b&gt;: 1; &lt;b&gt;Max&lt;/b&gt;: 200; &lt;b&gt;Default&lt;/b&gt;: 200.</param>
        /// <param name="next">The &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call URI to use if you wish to view the next page of the result set. For example, the following URI returns records 11 thru 20 from the collection of payment disputes:&lt;br&gt;&lt;br&gt;&lt;code&gt;path/payment_dispute_summary?limit&#x3D;10&amp;offset&#x3D;10&lt;/code&gt;&lt;br&gt;&lt;br&gt;This field is only returned if there is a next page of results to view based on the current input criteria..</param>
        /// <param name="offset">This integer value indicates the number of payment disputes skipped before listing the first payment dispute from the result set. The &lt;strong&gt;offset&lt;/strong&gt; value can be passed in as a query parameter in the request, or if it is not used, it defaults to &lt;code&gt;0&lt;/code&gt; and the first payment dispute of the result set is shown at the top of the response..</param>
        /// <param name="paymentDisputeSummaries">Each payment dispute that matches the input criteria is returned under this array. If no payment disputes are found, an empty array is returned..</param>
        /// <param name="prev">The &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call URI to use if you wish to view the previous page of the result set. For example, the following URI returns records 1 thru 10 from the collection of payment disputes:&lt;br&gt;&lt;br&gt;&lt;code&gt;path/payment_dispute_summary?limit&#x3D;10&amp;offset&#x3D;0&lt;/code&gt;&lt;br&gt;&lt;br&gt;This field is only returned if there is a previous page of results to view based on the current input criteria..</param>
        /// <param name="total">This integer value is the total number of payment disputes that matched the input criteria. If the total number of entries exceeds the value that was set for &lt;strong&gt;limit&lt;/strong&gt; in the request payload, you will have to make multiple API calls to see all pages of the results set. This field is returned even if it is &lt;code&gt;0&lt;/code&gt;..</param>
        public DisputeSummaryResponse(string href = default(string), int? limit = default(int?), string next = default(string), int? offset = default(int?), List<PaymentDisputeSummary> paymentDisputeSummaries = default(List<PaymentDisputeSummary>), string prev = default(string), int? total = default(int?))
        {
            this.Href = href;
            this.Limit = limit;
            this.Next = next;
            this.Offset = offset;
            this.PaymentDisputeSummaries = paymentDisputeSummaries;
            this.Prev = prev;
            this.Total = total;
        }
        
        /// <summary>
        /// The URI of the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call request that produced the current page of the result set.
        /// </summary>
        /// <value>The URI of the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call request that produced the current page of the result set.</value>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// This value shows the maximum number of payment disputes that will appear on one page of the result set. The &lt;strong&gt;limit&lt;/strong&gt; value can be passed in as a query parameter in the request, or if it is not used, it defaults to &lt;code&gt;200&lt;/code&gt;. If the value in the &lt;strong&gt;total&lt;/strong&gt; field exceeds this &lt;strong&gt;limit&lt;/strong&gt; value, there are multiple pages in the current result set.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min&lt;/b&gt;: 1; &lt;b&gt;Max&lt;/b&gt;: 200; &lt;b&gt;Default&lt;/b&gt;: 200
        /// </summary>
        /// <value>This value shows the maximum number of payment disputes that will appear on one page of the result set. The &lt;strong&gt;limit&lt;/strong&gt; value can be passed in as a query parameter in the request, or if it is not used, it defaults to &lt;code&gt;200&lt;/code&gt;. If the value in the &lt;strong&gt;total&lt;/strong&gt; field exceeds this &lt;strong&gt;limit&lt;/strong&gt; value, there are multiple pages in the current result set.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min&lt;/b&gt;: 1; &lt;b&gt;Max&lt;/b&gt;: 200; &lt;b&gt;Default&lt;/b&gt;: 200</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }

        /// <summary>
        /// The &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call URI to use if you wish to view the next page of the result set. For example, the following URI returns records 11 thru 20 from the collection of payment disputes:&lt;br&gt;&lt;br&gt;&lt;code&gt;path/payment_dispute_summary?limit&#x3D;10&amp;offset&#x3D;10&lt;/code&gt;&lt;br&gt;&lt;br&gt;This field is only returned if there is a next page of results to view based on the current input criteria.
        /// </summary>
        /// <value>The &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call URI to use if you wish to view the next page of the result set. For example, the following URI returns records 11 thru 20 from the collection of payment disputes:&lt;br&gt;&lt;br&gt;&lt;code&gt;path/payment_dispute_summary?limit&#x3D;10&amp;offset&#x3D;10&lt;/code&gt;&lt;br&gt;&lt;br&gt;This field is only returned if there is a next page of results to view based on the current input criteria.</value>
        [DataMember(Name="next", EmitDefaultValue=false)]
        public string Next { get; set; }

        /// <summary>
        /// This integer value indicates the number of payment disputes skipped before listing the first payment dispute from the result set. The &lt;strong&gt;offset&lt;/strong&gt; value can be passed in as a query parameter in the request, or if it is not used, it defaults to &lt;code&gt;0&lt;/code&gt; and the first payment dispute of the result set is shown at the top of the response.
        /// </summary>
        /// <value>This integer value indicates the number of payment disputes skipped before listing the first payment dispute from the result set. The &lt;strong&gt;offset&lt;/strong&gt; value can be passed in as a query parameter in the request, or if it is not used, it defaults to &lt;code&gt;0&lt;/code&gt; and the first payment dispute of the result set is shown at the top of the response.</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; set; }

        /// <summary>
        /// Each payment dispute that matches the input criteria is returned under this array. If no payment disputes are found, an empty array is returned.
        /// </summary>
        /// <value>Each payment dispute that matches the input criteria is returned under this array. If no payment disputes are found, an empty array is returned.</value>
        [DataMember(Name="paymentDisputeSummaries", EmitDefaultValue=false)]
        public List<PaymentDisputeSummary> PaymentDisputeSummaries { get; set; }

        /// <summary>
        /// The &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call URI to use if you wish to view the previous page of the result set. For example, the following URI returns records 1 thru 10 from the collection of payment disputes:&lt;br&gt;&lt;br&gt;&lt;code&gt;path/payment_dispute_summary?limit&#x3D;10&amp;offset&#x3D;0&lt;/code&gt;&lt;br&gt;&lt;br&gt;This field is only returned if there is a previous page of results to view based on the current input criteria.
        /// </summary>
        /// <value>The &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call URI to use if you wish to view the previous page of the result set. For example, the following URI returns records 1 thru 10 from the collection of payment disputes:&lt;br&gt;&lt;br&gt;&lt;code&gt;path/payment_dispute_summary?limit&#x3D;10&amp;offset&#x3D;0&lt;/code&gt;&lt;br&gt;&lt;br&gt;This field is only returned if there is a previous page of results to view based on the current input criteria.</value>
        [DataMember(Name="prev", EmitDefaultValue=false)]
        public string Prev { get; set; }

        /// <summary>
        /// This integer value is the total number of payment disputes that matched the input criteria. If the total number of entries exceeds the value that was set for &lt;strong&gt;limit&lt;/strong&gt; in the request payload, you will have to make multiple API calls to see all pages of the results set. This field is returned even if it is &lt;code&gt;0&lt;/code&gt;.
        /// </summary>
        /// <value>This integer value is the total number of payment disputes that matched the input criteria. If the total number of entries exceeds the value that was set for &lt;strong&gt;limit&lt;/strong&gt; in the request payload, you will have to make multiple API calls to see all pages of the results set. This field is returned even if it is &lt;code&gt;0&lt;/code&gt;.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisputeSummaryResponse {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  PaymentDisputeSummaries: ").Append(PaymentDisputeSummaries).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DisputeSummaryResponse);
        }

        /// <summary>
        /// Returns true if DisputeSummaryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DisputeSummaryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisputeSummaryResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.PaymentDisputeSummaries == input.PaymentDisputeSummaries ||
                    this.PaymentDisputeSummaries != null &&
                    input.PaymentDisputeSummaries != null &&
                    this.PaymentDisputeSummaries.SequenceEqual(input.PaymentDisputeSummaries)
                ) && 
                (
                    this.Prev == input.Prev ||
                    (this.Prev != null &&
                    this.Prev.Equals(input.Prev))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Next != null)
                    hashCode = hashCode * 59 + this.Next.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.PaymentDisputeSummaries != null)
                    hashCode = hashCode * 59 + this.PaymentDisputeSummaries.GetHashCode();
                if (this.Prev != null)
                    hashCode = hashCode * 59 + this.Prev.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
