/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace EBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type contains a breakdown of all costs associated with the fulfillment of a line item.
    /// </summary>
    [DataContract]
        public partial class DeliveryCost :  IEquatable<DeliveryCost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryCost" /> class.
        /// </summary>
        /// <param name="discountAmount">discountAmount.</param>
        /// <param name="handlingCost">handlingCost.</param>
        /// <param name="importCharges">importCharges.</param>
        /// <param name="shippingCost">shippingCost.</param>
        /// <param name="shippingIntermediationFee">shippingIntermediationFee.</param>
        public DeliveryCost(Amount discountAmount = default(Amount), Amount handlingCost = default(Amount), Amount importCharges = default(Amount), Amount shippingCost = default(Amount), Amount shippingIntermediationFee = default(Amount))
        {
            this.DiscountAmount = discountAmount;
            this.HandlingCost = handlingCost;
            this.ImportCharges = importCharges;
            this.ShippingCost = shippingCost;
            this.ShippingIntermediationFee = shippingIntermediationFee;
        }
        
        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name="discountAmount", EmitDefaultValue=false)]
        public Amount DiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets HandlingCost
        /// </summary>
        [DataMember(Name="handlingCost", EmitDefaultValue=false)]
        public Amount HandlingCost { get; set; }

        /// <summary>
        /// Gets or Sets ImportCharges
        /// </summary>
        [DataMember(Name="importCharges", EmitDefaultValue=false)]
        public Amount ImportCharges { get; set; }

        /// <summary>
        /// Gets or Sets ShippingCost
        /// </summary>
        [DataMember(Name="shippingCost", EmitDefaultValue=false)]
        public Amount ShippingCost { get; set; }

        /// <summary>
        /// Gets or Sets ShippingIntermediationFee
        /// </summary>
        [DataMember(Name="shippingIntermediationFee", EmitDefaultValue=false)]
        public Amount ShippingIntermediationFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliveryCost {\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  HandlingCost: ").Append(HandlingCost).Append("\n");
            sb.Append("  ImportCharges: ").Append(ImportCharges).Append("\n");
            sb.Append("  ShippingCost: ").Append(ShippingCost).Append("\n");
            sb.Append("  ShippingIntermediationFee: ").Append(ShippingIntermediationFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryCost);
        }

        /// <summary>
        /// Returns true if DeliveryCost instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryCost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryCost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.HandlingCost == input.HandlingCost ||
                    (this.HandlingCost != null &&
                    this.HandlingCost.Equals(input.HandlingCost))
                ) && 
                (
                    this.ImportCharges == input.ImportCharges ||
                    (this.ImportCharges != null &&
                    this.ImportCharges.Equals(input.ImportCharges))
                ) && 
                (
                    this.ShippingCost == input.ShippingCost ||
                    (this.ShippingCost != null &&
                    this.ShippingCost.Equals(input.ShippingCost))
                ) && 
                (
                    this.ShippingIntermediationFee == input.ShippingIntermediationFee ||
                    (this.ShippingIntermediationFee != null &&
                    this.ShippingIntermediationFee.Equals(input.ShippingIntermediationFee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiscountAmount != null)
                    hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.HandlingCost != null)
                    hashCode = hashCode * 59 + this.HandlingCost.GetHashCode();
                if (this.ImportCharges != null)
                    hashCode = hashCode * 59 + this.ImportCharges.GetHashCode();
                if (this.ShippingCost != null)
                    hashCode = hashCode * 59 + this.ShippingCost.GetHashCode();
                if (this.ShippingIntermediationFee != null)
                    hashCode = hashCode * 59 + this.ShippingIntermediationFee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
