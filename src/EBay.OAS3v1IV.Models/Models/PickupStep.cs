/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace eBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type is used to indicate the merchant&#x27;s store where the buyer will pickup their In-Store Pickup order. The &lt;b&gt;pickupStep&lt;/b&gt; container is only returned for In-Store Pickup orders. The In-Store Pickup feature is supported in the US, Canada, UK, Germany, and Australia marketplaces.
    /// </summary>
    [DataContract]
        public partial class PickupStep :  IEquatable<PickupStep>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PickupStep" /> class.
        /// </summary>
        /// <param name="merchantLocationKey">A merchant-defined unique identifier of the merchant&#x27;s store where the buyer will pick up their In-Store Pickup order.&lt;br&gt;&lt;br&gt; This field is always returned with the &lt;b&gt;pickupStep&lt;/b&gt; container..</param>
        public PickupStep(string merchantLocationKey = default(string))
        {
            this.MerchantLocationKey = merchantLocationKey;
        }
        
        /// <summary>
        /// A merchant-defined unique identifier of the merchant&#x27;s store where the buyer will pick up their In-Store Pickup order.&lt;br&gt;&lt;br&gt; This field is always returned with the &lt;b&gt;pickupStep&lt;/b&gt; container.
        /// </summary>
        /// <value>A merchant-defined unique identifier of the merchant&#x27;s store where the buyer will pick up their In-Store Pickup order.&lt;br&gt;&lt;br&gt; This field is always returned with the &lt;b&gt;pickupStep&lt;/b&gt; container.</value>
        [DataMember(Name="merchantLocationKey", EmitDefaultValue=false)]
        public string MerchantLocationKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PickupStep {\n");
            sb.Append("  MerchantLocationKey: ").Append(MerchantLocationKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PickupStep);
        }

        /// <summary>
        /// Returns true if PickupStep instances are equal
        /// </summary>
        /// <param name="input">Instance of PickupStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PickupStep input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantLocationKey == input.MerchantLocationKey ||
                    (this.MerchantLocationKey != null &&
                    this.MerchantLocationKey.Equals(input.MerchantLocationKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantLocationKey != null)
                    hashCode = hashCode * 59 + this.MerchantLocationKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
