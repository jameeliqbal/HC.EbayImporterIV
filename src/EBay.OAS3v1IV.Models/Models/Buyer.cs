/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EBay.OAS3v1IV.Client.SwaggerDateConverter;
namespace EBay.OAS3v1IV.Models
{
    /// <summary>
    /// This type contains information about the order&#x27;s buyer.
    /// </summary>
    [DataContract]
        public partial class Buyer :  IEquatable<Buyer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Buyer" /> class.
        /// </summary>
        /// <param name="buyerRegistrationAddress">buyerRegistrationAddress.</param>
        /// <param name="taxAddress">taxAddress.</param>
        /// <param name="taxIdentifier">taxIdentifier.</param>
        /// <param name="username">The buyer&#x27;s eBay user ID..</param>
        public Buyer(ExtendedContact buyerRegistrationAddress = default(ExtendedContact), TaxAddress taxAddress = default(TaxAddress), TaxIdentifier taxIdentifier = default(TaxIdentifier), string username = default(string))
        {
            this.BuyerRegistrationAddress = buyerRegistrationAddress;
            this.TaxAddress = taxAddress;
            this.TaxIdentifier = taxIdentifier;
            this.Username = username;
        }
        
        /// <summary>
        /// Gets or Sets BuyerRegistrationAddress
        /// </summary>
        [DataMember(Name="buyerRegistrationAddress", EmitDefaultValue=false)]
        public ExtendedContact BuyerRegistrationAddress { get; set; }

        /// <summary>
        /// Gets or Sets TaxAddress
        /// </summary>
        [DataMember(Name="taxAddress", EmitDefaultValue=false)]
        public TaxAddress TaxAddress { get; set; }

        /// <summary>
        /// Gets or Sets TaxIdentifier
        /// </summary>
        [DataMember(Name="taxIdentifier", EmitDefaultValue=false)]
        public TaxIdentifier TaxIdentifier { get; set; }

        /// <summary>
        /// The buyer&#x27;s eBay user ID.
        /// </summary>
        /// <value>The buyer&#x27;s eBay user ID.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Buyer {\n");
            sb.Append("  BuyerRegistrationAddress: ").Append(BuyerRegistrationAddress).Append("\n");
            sb.Append("  TaxAddress: ").Append(TaxAddress).Append("\n");
            sb.Append("  TaxIdentifier: ").Append(TaxIdentifier).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Buyer);
        }

        /// <summary>
        /// Returns true if Buyer instances are equal
        /// </summary>
        /// <param name="input">Instance of Buyer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Buyer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BuyerRegistrationAddress == input.BuyerRegistrationAddress ||
                    (this.BuyerRegistrationAddress != null &&
                    this.BuyerRegistrationAddress.Equals(input.BuyerRegistrationAddress))
                ) && 
                (
                    this.TaxAddress == input.TaxAddress ||
                    (this.TaxAddress != null &&
                    this.TaxAddress.Equals(input.TaxAddress))
                ) && 
                (
                    this.TaxIdentifier == input.TaxIdentifier ||
                    (this.TaxIdentifier != null &&
                    this.TaxIdentifier.Equals(input.TaxIdentifier))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuyerRegistrationAddress != null)
                    hashCode = hashCode * 59 + this.BuyerRegistrationAddress.GetHashCode();
                if (this.TaxAddress != null)
                    hashCode = hashCode * 59 + this.TaxAddress.GetHashCode();
                if (this.TaxIdentifier != null)
                    hashCode = hashCode * 59 + this.TaxIdentifier.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
