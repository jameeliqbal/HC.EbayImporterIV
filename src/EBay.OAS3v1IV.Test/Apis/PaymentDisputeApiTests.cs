/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using EBay.OAS3v1IV.Client;
using EBay.OAS3v1IV.Apis;
using EBay.OAS3v1IV.Models;

namespace EBay.OAS3v1IV.Test
{
    /// <summary>
    ///  Class for testing PaymentDisputeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PaymentDisputeApiTests
    {
        private PaymentDisputeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PaymentDisputeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PaymentDisputeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PaymentDisputeApi
            //Assert.IsInstanceOfType(typeof(PaymentDisputeApi), instance, "instance is a PaymentDisputeApi");
        }

        /// <summary>
        /// Test AcceptPaymentDispute
        /// </summary>
        [Test]
        public void AcceptPaymentDisputeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string paymentDisputeId = null;
            //AcceptPaymentDisputeRequest body = null;
            //instance.AcceptPaymentDispute(contentType, paymentDisputeId, body);
            
        }
        /// <summary>
        /// Test AddEvidence
        /// </summary>
        [Test]
        public void AddEvidenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string paymentDisputeId = null;
            //AddEvidencePaymentDisputeRequest body = null;
            //var response = instance.AddEvidence(contentType, paymentDisputeId, body);
            //Assert.IsInstanceOf<AddEvidencePaymentDisputeResponse> (response, "response is AddEvidencePaymentDisputeResponse");
        }
        /// <summary>
        /// Test ContestPaymentDispute
        /// </summary>
        [Test]
        public void ContestPaymentDisputeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string paymentDisputeId = null;
            //ContestPaymentDisputeRequest body = null;
            //instance.ContestPaymentDispute(contentType, paymentDisputeId, body);
            
        }
        /// <summary>
        /// Test FetchEvidenceContent
        /// </summary>
        [Test]
        public void FetchEvidenceContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentDisputeId = null;
            //string evidenceId = null;
            //string fileId = null;
            //var response = instance.FetchEvidenceContent(paymentDisputeId, evidenceId, fileId);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        /// <summary>
        /// Test GetActivities
        /// </summary>
        [Test]
        public void GetActivitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentDisputeId = null;
            //var response = instance.GetActivities(paymentDisputeId);
            //Assert.IsInstanceOf<PaymentDisputeActivityHistory> (response, "response is PaymentDisputeActivityHistory");
        }
        /// <summary>
        /// Test GetPaymentDispute
        /// </summary>
        [Test]
        public void GetPaymentDisputeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentDisputeId = null;
            //var response = instance.GetPaymentDispute(paymentDisputeId);
            //Assert.IsInstanceOf<PaymentDispute> (response, "response is PaymentDispute");
        }
        /// <summary>
        /// Test GetPaymentDisputeSummaries
        /// </summary>
        [Test]
        public void GetPaymentDisputeSummariesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderId = null;
            //string buyerUsername = null;
            //string openDateFrom = null;
            //string openDateTo = null;
            //string paymentDisputeStatus = null;
            //string limit = null;
            //string offset = null;
            //var response = instance.GetPaymentDisputeSummaries(orderId, buyerUsername, openDateFrom, openDateTo, paymentDisputeStatus, limit, offset);
            //Assert.IsInstanceOf<DisputeSummaryResponse> (response, "response is DisputeSummaryResponse");
        }
        /// <summary>
        /// Test UpdateEvidence
        /// </summary>
        [Test]
        public void UpdateEvidenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string paymentDisputeId = null;
            //UpdateEvidencePaymentDisputeRequest body = null;
            //instance.UpdateEvidence(contentType, paymentDisputeId, body);
            
        }
        /// <summary>
        /// Test UploadEvidenceFile
        /// </summary>
        [Test]
        public void UploadEvidenceFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentDisputeId = null;
            //string contentType = null;
            //var response = instance.UploadEvidenceFile(paymentDisputeId, contentType);
            //Assert.IsInstanceOf<FileEvidence> (response, "response is FileEvidence");
        }
    }

}
